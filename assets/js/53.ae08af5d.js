(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{398:function(e,t,a){"use strict";a.r(t);var r=a(41),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"egg基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#egg基础"}},[e._v("#")]),e._v(" egg基础")]),e._v(" "),a("h3",{attrs:{id:"特性-约定由于配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特性-约定由于配置"}},[e._v("#")]),e._v(" 特性 (约定由于配置)")]),e._v(" "),a("ul",[a("li",[e._v("基于koa性能好")]),e._v(" "),a("li",[e._v("插价机制 拓展好")]),e._v(" "),a("li",[e._v("内置多进程管理 无需pm2 多进程管理模式")]),e._v(" "),a("li",[e._v("框架稳定性高")])]),e._v(" "),a("h3",{attrs:{id:"egg和koa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#egg和koa"}},[e._v("#")]),e._v(" egg和koa")]),e._v(" "),a("ul",[a("li",[e._v("异步编程基于 node8以上基于 async await")]),e._v(" "),a("li",[e._v("koa和express Middleware 洋葱模型 继承与同一套http库 koa比express多了一个context对象")]),e._v(" "),a("li",[e._v("egg继承koa app/extend{application context request response}。js对于这四个对象的拓展")]),e._v(" "),a("li",[e._v("插价 config 配置各个环境下插件自身的默认配置项 middleware配置多个中间件 处理请求前和请求后的处理")]),e._v(" "),a("li",[e._v("支持node.js8以上的版本")])]),e._v(" "),a("h3",{attrs:{id:"快速入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速入门"}},[e._v("#")]),e._v(" 快速入门")]),e._v(" "),a("h4",{attrs:{id:"初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[e._v("#")]),e._v(" 初始化")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ mkdir egg-example\n$ cd egg-example\n$ npm init\n$ npm i egg --save\n$ npm i egg-bin --save-dev\n")])])]),a("h4",{attrs:{id:"编写controller和router"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写controller和router"}},[e._v("#")]),e._v(" 编写controller和router")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("app/controller/home.js \n\nconst Controller = require('egg').Controller;\n\nclass HomeController extends Controller {\n  async index() {\n    this.ctx.body = 'Hello world';\n  }\n}\n\nmodule.exports = HomeController;\n\n\napp/router.js\n\n// 路由映射\nmodule.exports = app => {\n  const { router, controller } = app;\n  router.get('/', controller.home.index);\n};\n\n// 默认配置文件\napp/config/config.default.js\n\nexports.key = 'afafafafa';\n")])])]),a("h4",{attrs:{id:"静态资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态资源"}},[e._v("#")]),e._v(" 静态资源")]),e._v(" "),a("ul",[a("li",[e._v("egg内置static插架 默认在app/public里面")])]),e._v(" "),a("h4",{attrs:{id:"模版渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模版渲染"}},[e._v("#")]),e._v(" 模版渲染")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" npm i egg-view-nunjucks --save\n\n app/config/plugin\nexports.nunjucks = {\n  enable: true,\n  package: 'egg-view-nunjucks'\n};\n\n// config/config.default.js\nexports.keys = <此处改为你自己的 Cookie 安全字符串>;\n// 添加 view 配置\nexports.view = {\n  defaultViewEngine: 'nunjucks',\n  mapping: {\n    '.tpl': 'nunjucks',\n  },\n};\n\n提示：开发期默认开启了 development 插件，修改后端代码后，会自动重启 Worker 进程。\n")])])]),a("h4",{attrs:{id:"编写service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写service"}},[e._v("#")]),e._v(" 编写service")]),e._v(" "),a("h4",{attrs:{id:"编写拓展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写拓展"}},[e._v("#")]),e._v(" 编写拓展")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// app/extend/helper.js 里面写辅助函数\n")])])]),a("h4",{attrs:{id:"编写middleware"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写middleware"}},[e._v("#")]),e._v(" 编写middleware")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("module.exports = (options, app) => {\n  return async function robotMiddleware(ctx, next) {\n    const source = ctx.get('user-agent') || '';\n    const match = options.ua.some(ua => ua.test(source));\n    if (match) {\n      ctx.status = 403;\n      ctx.message = 'Go away, robot.';\n    } else {\n      await next();\n    }\n  }\n};\n\n// config/config.default.js\n// add middleware robot\nexports.middleware = [\n  'robot'\n];\n// robot's configurations\nexports.robot = {\n  ua: [\n    /Baiduspider/i,\n  ]\n};\n")])])]),a("h4",{attrs:{id:"配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[e._v("#")]),e._v(" 配置文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// config/config.default.js\nexports.robot = {\n  ua: [\n    /curl/i,\n    /Baiduspider/i,\n  ],\n};\n\n// config/config.local.js\n// only read at development mode, will override default\nexports.robot = {\n  ua: [\n    /Baiduspider/i,\n  ],\n};\n\n// app/service/some.js\nconst Service = require('egg').Service;\n\nclass SomeService extends Service {\n  async list() {\n    const rule = this.config.robot.ua;\n  }\n}\n\nmodule.exports = SomeService;\n")])])]),a("h3",{attrs:{id:"目录机构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录机构"}},[e._v("#")]),e._v(" 目录机构")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("egg-project\n├── package.json\n├── app.js (可选)\n├── agent.js (可选)\n├── app\n|   ├── router.js\n│   ├── controller\n│   |   └── home.js\n│   ├── service (可选)\n│   |   └── user.js\n│   ├── middleware (可选)\n│   |   └── response_time.js\n│   ├── schedule (可选)\n│   |   └── my_task.js\n│   ├── public (可选)\n│   |   └── reset.css\n│   ├── view (可选)\n│   |   └── home.tpl\n│   └── extend (可选)\n│       ├── helper.js (可选)\n│       ├── request.js (可选)\n│       ├── response.js (可选)\n│       ├── context.js (可选)\n│       ├── application.js (可选)\n│       └── agent.js (可选)\n├── config\n|   ├── plugin.js\n|   ├── config.default.js\n│   ├── config.prod.js\n|   ├── config.test.js (可选)\n|   ├── config.local.js (可选)\n|   └── config.unittest.js (可选)\n└── test\n    ├── middleware\n    |   └── response_time.test.js\n    └── controller\n        └── home.test.js\n")])])]),a("h3",{attrs:{id:"内置对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置对象"}},[e._v("#")]),e._v(" 内置对象")]),e._v(" "),a("h4",{attrs:{id:"application"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#application"}},[e._v("#")]),e._v(" application")]),e._v(" "),a("ul",[a("li",[e._v("Application 是全局应用对象，在一个应用中，只会实例化一个，它继承自 Koa.Application，在它上面我们可以挂载一些全局的方法和对象。我们可以轻松的在插件或者应用中扩展 Application 对象。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// app.js\nmodule.exports = app => {\n  app.once('server', server => {\n    // websocket\n  });\n  app.on('error', (err, ctx) => {\n    // report error\n  });\n  app.on('request', ctx => {\n    // log receive request\n  });\n  app.on('response', ctx => {\n    // ctx.starttime is set by framework\n    const used = Date.now() - ctx.starttime;\n    // log total cost\n  });\n};\n\n获取方式\n\ncontroller service \n\n启动自定义脚本\n\n")])])]),a("h3",{attrs:{id:"context"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[e._v("#")]),e._v(" context")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Context 是一个请求级别的对象，继承自 Koa.Context。在每一次收到用户请求时，框架会实例化一个 Context 对象，这个对象封装了这次用户请求的信息，并提供了许多便捷的方法来获取请求参数或者设置响应信息。controller middleware service")])]),e._v(" "),a("li",[a("p",[e._v("可以通过 Application.createAnonymousContext() 方法创建一个匿名 Context 实例")])])]),e._v(" "),a("h3",{attrs:{id:"controller-和-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#controller-和-service"}},[e._v("#")]),e._v(" controller 和 service")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ctx - 当前请求的 Context 实例。\napp - 应用的 Application 实例。\nconfig - 应用的配置。\nservice - 应用所有的 service。\nlogger - 为当前 controller 封装的 logger 对象。\n")])])]),a("h3",{attrs:{id:"helper-挂载到-context中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#helper-挂载到-context中"}},[e._v("#")]),e._v(" helper 挂载到 context中")]),e._v(" "),a("h3",{attrs:{id:"运行环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行环境"}},[e._v("#")]),e._v(" 运行环境")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("指定运行环境 config/env 或者 EGG_SERVER_ENV=prod npm start")])]),e._v(" "),a("li",[a("p",[e._v("应用内获取运行环境  app.config.env")])]),e._v(" "),a("li",[a("p",[e._v("运行环境相关配置 config配置")])])]),e._v(" "),a("h3",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[e._v("#")]),e._v(" 配置")]),e._v(" "),a("p",[e._v("配置"),a("a",{attrs:{href:"https://eggjs.org/zh-cn/basics/config.html#%E5%90%88%E5%B9%B6%E8%A7%84%E5%88%99",target:"_blank",rel:"noopener noreferrer"}},[e._v("egg链接"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"middleware"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#middleware"}},[e._v("#")]),e._v(" middleware")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("如何编写中间价")])]),e._v(" "),a("li",[a("p",[e._v("使用中间件")])]),e._v(" "),a("li",[a("p",[e._v("配置中间件")])])]),e._v(" "),a("h3",{attrs:{id:"路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[e._v("#")]),e._v(" 路由")]),e._v(" "),a("ul",[a("li",[e._v("如何定义router")]),e._v(" "),a("li",[e._v("router定义说明")]),e._v(" "),a("li",[e._v("router实战 获取参数")])]),e._v(" "),a("h3",{attrs:{id:"controller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#controller"}},[e._v("#")]),e._v(" controller")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("解析用户输入 处理返回结果 1.数据库参数  2.html请求返回不同模版 3 转发服务器")])]),e._v(" "),a("li",[a("p",[e._v("获取用户http请求参数  校验，组装参数  调用service  http 响应结果返回")])])]),e._v(" "),a("h4",{attrs:{id:"获取controller参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取controller参数"}},[e._v("#")]),e._v(" 获取controller参数")]),e._v(" "),a("ul",[a("li",[e._v("ctx.query.name  ctx.params  ctx.body")]),e._v(" "),a("li",[e._v("获取上传文件")]),e._v(" "),a("li",[e._v("head参数的获取 ctx.headers  ctx.get ctx.host ctx.protocol ctx.ip")]),e._v(" "),a("li",[e._v("发送http响应 设置status 设置body 设置header  重定向")])]),e._v(" "),a("h4",{attrs:{id:"cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[e._v("#")]),e._v(" cookie")]),e._v(" "),a("ul",[a("li",[e._v("获取cookies ctx.cookies获取读取cookie")])]),e._v(" "),a("h3",{attrs:{id:"service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[e._v("#")]),e._v(" service")]),e._v(" "),a("ul",[a("li",[e._v("复杂数据的处理，比如要展现的信息需要从数据库获取，还要经过一定的规则计算，才能返回用户显示。或者计算完成后，更新到数据库。\n第三方服务的调用，比如 GitHub 信息获取等。")])]),e._v(" "),a("h3",{attrs:{id:"插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件"}},[e._v("#")]),e._v(" 插件")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("why ?"),a("br"),e._v("\n1.中间件加载其实是有先后顺序的，但是中间件自身却无法管理这种顺序，只能交给使用者。这样其实非常不友好，一旦顺序不对，结果可能有天壤之别。\n2.中间件的定位是拦截用户请求，并在它前后做一些事情，例如：鉴权、安全检查、访问日志等等。但实际情况是，有些功能是和请求无关的，例如：定时任务、消息订阅、后台逻辑等等\n3.有些功能包含非常复杂的初始化逻辑，需要在应用启动的时候完成。这显然也不适合放到中间件中去实现。")])]),e._v(" "),a("li",[a("p",[e._v("relation ?")])])]),e._v(" "),a("p",[e._v("包含点 service 中间件 配置  框架拓展 没有plugin 和 controller router")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("how to use it?\nplugin 引入 挂载到了app上了\n环境配置 根据运行环境加载\n渐近式开发 package path 两种模式")])]),e._v(" "),a("li",[a("p",[e._v("how to create it?")])])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://eggjs.org/zh-cn/advanced/plugin.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("插件开发"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"启动自定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动自定义"}},[e._v("#")]),e._v(" 启动自定义")]),e._v(" "),a("ul",[a("li",[e._v("配置文件即将加载，这是最后动态修改配置的时机（configWillLoad）\n配置文件加载完成（configDidLoad）\n文件加载完成（didLoad）\n插件启动完毕（willReady）\nworker 准备就绪（didReady）\n应用启动完成（serverDidReady）\n应用即将关闭（beforeClose）")])])])}),[],!1,null,null,null);t.default=n.exports}}]);