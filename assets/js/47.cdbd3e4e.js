(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{392:function(n,o,t){"use strict";t.r(o);var e=t(41),l=Object(e.a)({},(function(){var n=this,o=n.$createElement,t=n._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"js类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js类型转换"}},[n._v("#")]),n._v(" js类型转换")]),n._v(" "),t("h2",{attrs:{id:"原始值转化boolean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始值转化boolean"}},[n._v("#")]),n._v(" 原始值转化boolean")]),n._v(" "),t("p",[n._v("6种基本类型 Boolean()")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('console.log(Boolean()) // false\n\nconsole.log(Boolean(false)) // false\n\nconsole.log(Boolean(undefined)) // false\nconsole.log(Boolean(null)) // false\nconsole.log(Boolean(+0)) // false\nconsole.log(Boolean(-0)) // false\nconsole.log(Boolean(NaN)) // false\nconsole.log(Boolean("")) // false\n')])])]),t("h2",{attrs:{id:"原始值转化为数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始值转化为数字"}},[n._v("#")]),n._v(" 原始值转化为数字")]),n._v(" "),t("p",[n._v("Number 函数将类型转换成数字类型，如果参数无法被转换为数字，则返回 NaN")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("console.log(String()) // 空字符串\n\nconsole.log(String(undefined)) // undefined\nconsole.log(String(null)) // null\n\nconsole.log(String(false)) // false\nconsole.log(String(true)) // true\n\nconsole.log(String(0)) // 0\nconsole.log(String(-0)) // 0\nconsole.log(String(NaN)) // NaN\nconsole.log(String(Infinity)) // Infinity\nconsole.log(String(-Infinity)) // -Infinity\nconsole.log(String(1)) // 1\n")])])]),t("h2",{attrs:{id:"原始值转字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始值转字符"}},[n._v("#")]),n._v(" 原始值转字符")]),n._v(" "),t("p",[n._v("如果 String 函数不传参数，返回空字符串，如果有参数，调用 ToString(value)，而 ToString 也给了一个对应的结果表")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("console.log(String()) // 空字符串\n\nconsole.log(String(undefined)) // undefined\nconsole.log(String(null)) // null\n\nconsole.log(String(false)) // false\nconsole.log(String(true)) // true\n\nconsole.log(String(0)) // 0\nconsole.log(String(-0)) // 0\nconsole.log(String(NaN)) // NaN\nconsole.log(String(Infinity)) // Infinity\nconsole.log(String(-Infinity)) // -Infinity\nconsole.log(String(1)) /\n")])])]),t("h2",{attrs:{id:"原始值转对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始值转对象"}},[n._v("#")]),n._v(" 原始值转对象")]),n._v(" "),t("p",[n._v("原始值到对象的转换非常简单，原始值通过调用 String()、Number() 或者 Boolean() 构造函数，转换为它们各自的包装对象")]),n._v(" "),t("h2",{attrs:{id:"对象转布尔值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象转布尔值"}},[n._v("#")]),n._v(" 对象转布尔值")]),n._v(" "),t("p",[n._v("对象到布尔值的转换非常简单：所有对象(包括数组和函数)都转换为 true")]),n._v(" "),t("h2",{attrs:{id:"对象转字符串和数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象转字符串和数字"}},[n._v("#")]),n._v(" 对象转字符串和数字")]),n._v(" "),t("ul",[t("li",[n._v("数组的 toString 方法将每个数组元素转换成一个字符串，并在元素之间添加逗号后合并成结果字符串。\n函数的 toString 方法返回源代码字符串。\n日期的 toString 方法返回一个可读的日期和时间字符串。\nRegExp 的 toString 方法返回一个表示正则表达式直接量的字符串。")])]),n._v(" "),t("h2",{attrs:{id:"json-stringify"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json-stringify"}},[n._v("#")]),n._v(" JSON.stringify")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("处理基本类型时，与使用toString基本相同，结果都是字符串，除了 undefined")])]),n._v(" "),t("li",[t("p",[n._v("布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。")])]),n._v(" "),t("li",[t("p",[n._v("undefined、任意的函数以及 symbol 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 null（出现在数组中时）")])]),n._v(" "),t("li",[t("p",[n._v("如果一个被序列化的对象拥有 toJSON 方法，那么该 toJSON 方法就会覆盖该对象默认的序列化行为：不是那个对象被序列化，而是调用 toJSON 方法后的返回值会被序列化")])])]),n._v(" "),t("h2",{attrs:{id:"一元操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一元操作符"}},[n._v("#")]),n._v(" 一元操作符")]),n._v(" "),t("ul",[t("li",[n._v("当 + 运算符作为一元操作符的时候，查看 ES5规范1.4.6，会调用 ToNumber 处理该值，相当于 Number('1')，最终结果返回数字 1")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("console.log(+['1']); // 1\nconsole.log(+['1', '2', '3']); // NaN\nconsole.log(+{}); // NaN\n")])])]),t("h2",{attrs:{id:"二元操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二元操作符"}},[n._v("#")]),n._v(" 二元操作符")]),n._v(" "),t("ul",[t("li",[n._v("当计算 value1 + value2时：")])]),n._v(" "),t("p",[n._v("lprim = ToPrimitive(value1)\nrprim = ToPrimitive(value2)\n如果 lprim 是字符串或者 rprim 是字符串，那么返回 ToString(lprim) 和 ToString(rprim)的拼接结果\n返回 ToNumber(lprim) 和 ToNumber(rprim)的运算结果")]),n._v(" "),t("h2",{attrs:{id:"相等"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相等"}},[n._v("#")]),n._v(" == 相等")]),n._v(" "),t("ul",[t("li",[n._v("x是布尔值，判断ToNumber(x) == y")])]),n._v(" "),t("p",[n._v("y是布尔值，判断x ==ToNumber(y)")]),n._v(" "),t("p",[n._v("x不是字符串或者数字，y是对象，判断x == ToPrimitive(y)")]),n._v(" "),t("p",[n._v("x是对象，y不是字符串或者数字，判断ToPrimitive(x) == y")])])}),[],!1,null,null,null);o.default=l.exports}}]);