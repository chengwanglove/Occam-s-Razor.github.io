(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{372:function(t,a,r){"use strict";r.r(a);var s=r(41),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"浏览器页面"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器页面"}},[t._v("#")]),t._v(" 浏览器页面")]),t._v(" "),r("h2",{attrs:{id:"chrome-开发者工具"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#chrome-开发者工具"}},[t._v("#")]),t._v(" Chrome 开发者工具")]),t._v(" "),r("h2",{attrs:{id:"dom如何生成的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dom如何生成的"}},[t._v("#")]),t._v(" dom如何生成的")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("HTML 解析器并不是等整个文档加载完成之后再解析的，而是网络 进程加载了多少数据，HTML 解析器便解析多少数据。")])]),t._v(" "),r("li",[r("p",[t._v("渲染进程准备好 之后，网络进程和渲染进程之间会建立一个共享数据的管道，网络进程接收到数据后就往这 个管道里面放，而渲染进程则从管道的另外一端不断地读取数据，并同时将读取的数 据“喂”给 HTML 解析器。你可以把这个管道想象成一个“水管”，网络进程接收到的字 节流像水一样倒进这个“水管”，而“水管”的另外一端是渲染进程的 HTML 解析器，它 会动态接收字节流，并将其解析为 DOM。")])]),t._v(" "),r("li",[r("p",[t._v("第一阶段  通过分词器将字节流转换为 Token。")])]),t._v(" "),r("li",[r("p",[t._v("至于后续的第二个和第三个阶段是同步进行的，需要将 Token 解析为 DOM 节点，并将 DOM 节点添加到 DOM 树中。")])])]),t._v(" "),r("h2",{attrs:{id:"javascript-是如何影响-dom-生成的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript-是如何影响-dom-生成的"}},[t._v("#")]),t._v(" JavaScript 是如何影响 DOM 生成的")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("javaScript 文件的下载过程会阻塞 DOM 解析，而通常下载又是非常耗时的，会受到网络环境、JavaScript 文件大小等因素的 影响。")])]),t._v(" "),r("li",[r("p",[t._v("我们知道了 JavaScript 会阻塞 DOM 生成，而样式文件又会阻塞 JavaScript 的执行")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);